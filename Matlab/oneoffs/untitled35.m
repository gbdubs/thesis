% Appendix B Generator: A List of all Co-Cycles Graphs.

nautyCannon = [
'IGG}EeZ^_';
'I?mrbbNro';
'I?]rcflro';
'I?SsbTefW';
'I?SsbTffw';
'I_Ogpgrr_';
'IAGZCmM]W';
'IAGZCmN]w';
'IBOcSKN^?';
'I?iRjrlv_';
'IANcIszxw';
'I?djQgrdw';
'I?dPjXjfw';
'I?Y[qgrXw';
'I?SzCuVZw';
'IAK^EMf^W';
'IB?kQ]]\o';
'I@X?kMZ^O';
'ICCjA\ufo';
'ICOXJDxfo';
'I_GW~`m{o';
'ICqbyw|{w';
'IDW\JNZvo';
'IC[ZLNrvo';
'IChNhx\{w';
'IoLUL_^Yo';
'IoLTeK\Yg';
'IKdHZhrfw';
'IILcsmN^W';
'IIaGXSV[W';
'IQ`@OgfEw';
'IQQ@HcMEW';
'IoLTM_^Yo';
'IoSteK\Yg';
'IB_iCcNZ_';
'IBaOXLJYW';
'IAK]LJb]o';
'IJeQPMNZo';
'Itp?W[r\?';
'ITiZJLYUW';
'I?iYbE{[o';
'ITPHGurRo';
'ITiZJdLUg';
'I@h[z^x|g';
'IJ_iKuN^_';
'I?YVE_|N_';
'IQr@hofEw';
'I`q\QdfNO';
'I`q\IteMW';
'I`qkiteMW';
'I?hRtj\z_';
'I@dVNQ|^_';
'I@hUvH|n_';
'I`qkqdfNO';
'I?dVF?}NO';
'IQr@`suBw';
'I?mrrjnvo';
'I{cBIkkFG';
'I_hgw~q{W';
'I?hRM_}mO';
'I@o]LHr]o';
'IRHKshNZo';
'IQV@Okzho';
'I@VVFO~n_';
'I@zee_~No';
'I`KxGrBow';
'I_OpmOlEw';
'ICLP]^qzG';
'IOOgidwbo';
'I_\@cKVJW';
'ICOnaw{ww';
'I`ogzhqbw';
'I`KxGvBow';
'IvO_W]RZG';
'I}CHG]RZG';
'I`CuP\{ro';
'IQLas]V^W';
'IcLHZdtfw';
'IukH@LFT_';
'ItsI@KfT_';
'I@oZeMf^W';
'IEIBXx\xw';
'I}iAzg\Jg';
'Ib`HKsn^_';
'Ib_iKsn^_';
'I`PcSkz^_';
'I`Pcc[z^_';
'IHtKlNr^o';
'I`cnixl{w';
'IKpX|^x|g';
'I`GXOiBOw';
'I`G[ACjDw';
'I_YXW~p{g';
'I`GZ[~s}G';
'I`Kcy~szG';
'I`GRSlkfG';
'I`YXOlbcw';
'I`KCYmk\G';
'I`dh_]RWw';
'I_mrrjnvo';
'I`HZS}u}G';
'I_hZSlxlg';
'I`hZSlxlg';
'ID`BXx[ww';
'IoKQh\{ro';
'IoKag|{ro';
'IoCzbpMbw';
'I}aJhxMMW';
'I`MohTJow';
'I_Cg|Xq{G';
'I`iRzX\{w';
'IqLck\z^o';
'I_IOzpm{o';
'IOF?zpm{o';
'I}aJyWxLW';
'I|qAzg\Jg';
];

myCannon = [
'I?S}fEb^G';
'I?vVF?~No';
'I?zecpvNo';
'I@PjcKXfg';
'I@PjgqFfw';
'I@Pjk?XeW';
'I@QKbK]^_';
'I@QKg|e^g';
'I@QKj?]]O';
'I@Q}vVsF_';
'I@Sy~AFxw';
'I@TjcKXfg';
'I@TjgqFfw';
'I@UKbK]^_';
'I@UKg|e^g';
'I@UeNK]^g';
'IBA[YWj[w';
'IBO_[uF^G';
'ICDrIWjew';
'ICO_zpdfg';
'ICOi~_m{W';
'IDoy{Lxxw';
'IDqeG|}^o';
'IEK^UMf^W';
'IEMFYw|xw';
'IEYakthhg';
'IEYbLTXdg';
'IHTjkqFfw';
'IHUKk|e^g';
'IICkKSN^?';
'IIa?X_VIw';
'IIa?hONKo';
'IIeahrJho';
'IIedUGvUo';
'IIok?[RLg';
'IIq?XgjDw';
'IJCeMQNNo';
'IJCmMQNNo';
'IJPKkmgiG';
'IJX[suehW';
'IJaJcWVIo';
'IJaJcWVIw';
'IJiYrMYhW';
'IJmwhVVyw';
'IJokOmN\o';
'IKCeMO|N_';
'IKCmMO|N_';
'IKNIlLheg';
'IKNItTddg';
'IKNLQyRXg';
'IK]oxZTy_';
'IK]unONNG';
'IK]unO\Jg';
'IKoytXbdg';
'IKr@hoNKo';
'IKr@hoNKw';
'ILQHxz|~_';
'ILQIstchG';
'ILs?w~dxg';
'IXeI?LrFo';
'IYGUUG^No';
'IYr?xSVNW';
'I[d@bK]Bw';
'I]q`_\^No';
'I]r?Xc~No';
'I_CXX^o{G';
'I_ChhtKrG';
'I_Yko~p\g';
'I_[haGR`w';
'I_[qCKjDw';
'I`CbjrKbw';
'I`CjjrKbw';
'I`KwXfBow';
'I`T\DCN{G';
'I`T\DDdeg';
'I`[honDpw';
'IaL`syN\w';
'IaMHrhffw';
'IcXTHpeeO';
'IceahlgYG';
'IgCydMN]w';
'IgC{JdZjw';
'IhP\tYtu_';
'IhiGyKZ\W';
'IhiIO{V\g';
'IiGLG}R^G';
'IiGL_}F^G';
'IiWtkuN^W';
'Ii_tzplfw';
'IjmwhVVyw';
'Il?GOKrN?';
'Il?GOKrNG';
'IlC`hvLrg';
'IlChhvLrg';
'IlKpmVLBw';
'IlQGhS]JO';
'IlQGhS]JW';
'IlQGhS{Bo';
'IlQGhS{Bw';
'IlQHxz|~_';
'Ilgx_^FUw';
'IlhYtKNKo';
'IlhYtKNKw';
'IoGRrh[bw';
'Io\XaKZhw';
'Io\YPcVhw';
'Io\q`SVbw';
'IodrZq]{O';
'IpKXeDFBw';
'IpKgWNPSw';
'IpTjkLxfw';
'IpUKjL}^o';
'Iq?JXxYlW';
'Iq?JpxMlW';
'IrXkskN{G';
'IrXksktqg';
];

indices = zeros(116, 12);
for i = 1 : 116
    indices(i,12) = i;
    A = graph6(myCannon(i,:));
    cycles = sortrows(generateKs(A, 10));
    indices(i,1) = sum(sum(A));
    indices(i,2:11) = cycles(:, 10);
end
indices = sortrows(indices);

myCannon = myCannon(indices(:,12),:);
nautyCannon = nautyCannon(indices(:,12),:);

disp('\begin{longtable}{ | c | c || c | c | c | }');
disp('\hline');
disp('\multicolumn{5}{|c|}{ Co-Cycles Dataset } \\');
disp('\hline');
disp('N & M & CyclesCannonization & NautyCannonization & Co-Cycles Group \\');
disp('\hline');
disp('\hline');
disp('\endhead');

last = zeros(10);
group = 0;
lastM = 16
for i = 1 : 116
    A = graph6(myCannon(i,:));
    toReplace = ['&'; '_'; '^'; '}';'{'];
    myEncoding = strrep(myCannon(i,:), '\', '\textbackslash ');
    nautyEncoding = strrep(nautyCannon(i,:), '\', '\textbackslash ');
    for j = toReplace'
        myEncoding = strrep(myEncoding, j, ['\',j]);
        nautyEncoding = strrep(nautyEncoding, j, ['\',j]);
    end
    N = round(sqrt(numel(A)));
    M = sum(sum(A))/2;
    if (M ~= lastM)
        lastM = M;
        disp('\hline');
    end
    cycles = sortrows(generateKs(A, 10));
    groupNo = group;
    if any(any(last ~= cycles))
        disp('\hline');
        group = group + 1;
        groupNo = group;
        last = cycles;
    end
    disp([num2str(N), ' & ', num2str(M), ' & ', myEncoding, ' & ', nautyEncoding, ' & ', num2str(groupNo), ' \\']);
end
disp('\hline');
disp('\end{longtable}');